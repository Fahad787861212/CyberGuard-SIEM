# Input section for reading multiple log files
input {
  file {
    path => "C:/Users/Fahad Ijaz/OneDrive/Desktop/UZAIR_LOGS/error_log2.txt"
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => plain {
      charset => "UTF-8"
    }
  }
  file {
    path => "C:/Users/Fahad Ijaz/Downloads/winlogbeat-8.14.3-windows-x86_64/winlogbeat-8.14.3-windows-x86_64/SIEM/Logs/New/System.log"
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => multiline {
      pattern => "^timestamp="
      negate => true
      what => "previous"
    }
  }
  file {
    path => "C:/Users/Fahad Ijaz/Downloads/winlogbeat-8.14.3-windows-x86_64/winlogbeat-8.14.3-windows-x86_64/SIEM/Logs/New/Application.log"
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => multiline {
      pattern => "^timestamp="
      negate => true
      what => "previous"
    }
  }
  file {
    path => "C:/Users/Fahad Ijaz/Downloads/winlogbeat-8.14.3-windows-x86_64/winlogbeat-8.14.3-windows-x86_64/SIEM/Logs/New/Security.log"
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => multiline {
      pattern => "^timestamp="
      negate => true
      what => "previous"
    }
  }
  file {
    path => "C:/Users/Fahad Ijaz/OneDrive/Desktop/UZAIR_LOGS/system_info2.json"
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => multiline {
      pattern => "^\\s*\\{.*\\}\\s*$"  # Matches the start of a JSON object
      negate => true
      what => "previous"
      auto_flush_interval => 2
    }
  }
}

# Filter section based on the file path
filter {
  if [log][file][path] == "C:/Users/Fahad Ijaz/OneDrive/Desktop/UZAIR_LOGS/error_log2.txt" {
    mutate {
      add_field => { "log_type" => "Error" }
    }
    mutate {
      add_field => {
        "error_message" => "%{message}"
      }
      remove_field => ["message"]
    }
  } else if [log][file][path] == "C:/Users/Fahad Ijaz/Downloads/winlogbeat-8.14.3-windows-x86_64/winlogbeat-8.14.3-windows-x86_64/SIEM/Logs/New/System.log" {
    mutate {
      add_field => { "log_type" => "System" }
    }
    grok {
      match => {
        "message" => "bootid: %{NUMBER:boot_id}, resumecount: %{NUMBER:resume_count}, fullresume: %{NUMBER:full_resume}, averageresume: %{NUMBER:average_resume}, suspendstart: %{NUMBER:suspend_start}, suspendend: %{NUMBER:suspend_end}"
      }
    }
  } else if [log][file][path] == "C:/Users/Fahad Ijaz/Downloads/winlogbeat-8.14.3-windows-x86_64/winlogbeat-8.14.3-windows-x86_64/SIEM/Logs/New/Application.log" {
    mutate {
      add_field => { "log_type" => "Application" }
    }
    grok {
      match => {
        "message" => [
          "Faulting application name: %{DATA:faulting_application_name}",
          "Faulting module name: %{DATA:faulting_module_name}",
          "Exception code: %{DATA:exception_code}",
          "Faulting process id: %{NUMBER:faulting_process_id}",
          "Faulting application path: %{DATA:faulting_application_path}",
          "Faulting module path: %{DATA:faulting_module_path}",
          "Report Id: %{DATA:report_id}",
          "Problem signature: %{GREEDYDATA:problem_signature}"
        ]
      }
    }
  } else if [log][file][path] == "C:/Users/Fahad Ijaz/Downloads/winlogbeat-8.14.3-windows-x86_64/winlogbeat-8.14.3-windows-x86_64/SIEM/Logs/New/Security.log" {
    mutate {
      add_field => { "log_type" => "Security" }
    }
    grok {
      match => {
        "message" => "Provider Name: %{DATA:providername}, New Provider State: %{DATA:newproviderstate}, Sequence Number: %{NUMBER:sequencenumber}, Hostname: %{DATA:hostname}, Host Version: %{DATA:hostversion}, Host Id: %{DATA:hostid}, Host Application: %{DATA:hostapplication}, Engine Version: %{DATA:engineversion}, Runspace Id: %{DATA:runspaceid}, Pipeline Id: %{DATA:pipelineid}, Command Name: %{DATA:commandname}, Command Type: %{DATA:commandtype}, Script Name: %{DATA:scriptname}, Command Path: %{DATA:commandpath}, Command Line: %{GREEDYDATA:commandline}"
      }
    }
  } else if [log][file][path] == "C:/Users/Fahad Ijaz/OneDrive/Desktop/UZAIR_LOGS/system_info2.json" {
    mutate {
      add_field => { "log_type" => "SystemInfo" }
    }
    json {
      source => "message"
      target => "system_info"
      remove_field => ["message"]
    }
    mutate {
      rename => {
        "[system_info][WindowsBuildLabEx]" => "[windows][build_lab_ex]"
        "[system_info][WindowsCurrentVersion]" => "[windows][current_version]"
        "[system_info][WindowsEditionId]" => "[windows][edition_id]"
        "[system_info][WindowsInstallationType]" => "[windows][installation_type]"
        "[system_info][WindowsInstallDateFromRegistry]" => "[windows][install_date_from_registry]"
        "[system_info][WindowsProductId]" => "[windows][product_id]"
        "[system_info][WindowsProductName]" => "[windows][product_name]"
        "[system_info][WindowsRegisteredOwner]" => "[windows][registered_owner]"
        "[system_info][WindowsSystemRoot]" => "[windows][system_root]"
        "[system_info][WindowsVersion]" => "[windows][version]"
        "[system_info][OSDisplayVersion]" => "[windows][display_version]"
        "[system_info][BiosCaption]" => "[bios][caption]"
        "[system_info][BiosManufacturer]" => "[bios][manufacturer]"
        "[system_info][BiosName]" => "[bios][name]"
        "[system_info][BiosReleaseDate]" => "[bios][release_date]"
        "[system_info][BiosSeralNumber]" => "[bios][serial_number]"
        "[system_info][BiosVersion]" => "[bios][version]"
        "[system_info][BiosSMBIOSBIOSVersion]" => "[bios][smbios_version]"
        "[system_info][CsProcessors][0][Name]" => "[system][processor][name]"
        "[system_info][CsProcessors][0][Manufacturer]" => "[system][processor][manufacturer]"
        "[system_info][CsProcessors][0][MaxClockSpeed]" => "[system][processor][max_clock_speed]"
        "[system_info][CsProcessors][0][NumberOfCores]" => "[system][processor][number_of_cores]"
        "[system_info][CsProcessors][0][NumberOfLogicalProcessors]" => "[system][processor][number_of_logical_processors]"
        "[system_info][CsNetworkAdapters][0][Description]" => "[network][adapter][0][description]"
        "[system_info][CsNetworkAdapters][0][ConnectionID]" => "[network][adapter][0][connection_id]"
        "[system_info][CsNetworkAdapters][0][IPAddresses]" => "[network][adapter][0][ip_address]"
      }
    }
  }

  # Add timestamp for all events
  mutate {
    add_field => { "current_timestamp" => "%{+YYYY-MM-dd'T'HH:mm:ss.SSSZ}" }
  }

  # Date parsing for event timestamp
  date {
    match => ["event_timestamp", "ISO8601"]
    timezone => "UTC"
  }
}

# Output section to Elasticsearch based on log_type
output {
  if [log_type] == "Application" {
    elasticsearch {
      hosts => ["<http://localhost:9200>"]
      index => "application_index"
      user => "elastic"
      password => "BUrYMhg*u2bf5pR8a1cn"
      ssl => false
    }
  } else if [log_type] == "Security" {
    elasticsearch {
      hosts => ["<http://localhost:9200>"]
      index => "security_index"
      user => "elastic"


      password => "BUrYMhg*u2bf5pR8a1cn"
      ssl => false
    }
  } else if [log_type] == "System" {
    elasticsearch {
      hosts => ["<http://localhost:9200>"]
      index => "system_index"
      user => "elastic"
      password => "BUrYMhg*u2bf5pR8a1cn"
      ssl => false
    }
  } else if [log_type] == "Error" {
    elasticsearch {
      hosts => ["<http://localhost:9200>"]
      index => "error_index"
      user => "elastic"
      password => "BUrYMhg*u2bf5pR8a1cn"
      ssl => false
    }
  } else if [log_type] == "SystemInfo" {
    elasticsearch {
      hosts => ["<http://localhost:9200>"]
      index => "system_info_index"
      user => "elastic"
      password => "BUrYMhg*u2bf5pR8a1cn"
      ssl => false
    }
  }

  stdout { codec => rubydebug }
}
